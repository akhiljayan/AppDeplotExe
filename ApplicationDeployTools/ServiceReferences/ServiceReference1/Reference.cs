//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApplicationDeployTools.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllSites", ReplyAction="http://tempuri.org/IService1/GetAllSitesResponse")]
        string[] GetAllSites();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllSites", ReplyAction="http://tempuri.org/IService1/GetAllSitesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllSitesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPools", ReplyAction="http://tempuri.org/IService1/GetAllPoolsResponse")]
        string[] GetAllPools();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPools", ReplyAction="http://tempuri.org/IService1/GetAllPoolsResponse")]
        System.Threading.Tasks.Task<string[]> GetAllPoolsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAppBySite", ReplyAction="http://tempuri.org/IService1/GetAppBySiteResponse")]
        string[] GetAppBySite(string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAppBySite", ReplyAction="http://tempuri.org/IService1/GetAppBySiteResponse")]
        System.Threading.Tasks.Task<string[]> GetAppBySiteAsync(string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetAppPool", ReplyAction="http://tempuri.org/IService1/SetAppPoolResponse")]
        string SetAppPool(string appPool, string app, string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetAppPool", ReplyAction="http://tempuri.org/IService1/SetAppPoolResponse")]
        System.Threading.Tasks.Task<string> SetAppPoolAsync(string appPool, string app, string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MoveChangeAppPath", ReplyAction="http://tempuri.org/IService1/MoveChangeAppPathResponse")]
        string MoveChangeAppPath(string app, string path, string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MoveChangeAppPath", ReplyAction="http://tempuri.org/IService1/MoveChangeAppPathResponse")]
        System.Threading.Tasks.Task<string> MoveChangeAppPathAsync(string app, string path, string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAppVirtualPath", ReplyAction="http://tempuri.org/IService1/GetAppVirtualPathResponse")]
        string GetAppVirtualPath(string app, string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAppVirtualPath", ReplyAction="http://tempuri.org/IService1/GetAppVirtualPathResponse")]
        System.Threading.Tasks.Task<string> GetAppVirtualPathAsync(string app, string site);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateNewPool", ReplyAction="http://tempuri.org/IService1/CreateNewPoolResponse")]
        string CreateNewPool(string name, string netclr, string pipeline, bool startflag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateNewPool", ReplyAction="http://tempuri.org/IService1/CreateNewPoolResponse")]
        System.Threading.Tasks.Task<string> CreateNewPoolAsync(string name, string netclr, string pipeline, bool startflag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAppVir", ReplyAction="http://tempuri.org/IService1/CreateAppVirResponse")]
        string CreateAppVir(string site, string pool, string name, string virtualpath, string appvir);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateAppVir", ReplyAction="http://tempuri.org/IService1/CreateAppVirResponse")]
        System.Threading.Tasks.Task<string> CreateAppVirAsync(string site, string pool, string name, string virtualpath, string appvir);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ApplicationDeployTools.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ApplicationDeployTools.ServiceReference1.IService1>, ApplicationDeployTools.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetAllSites() {
            return base.Channel.GetAllSites();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllSitesAsync() {
            return base.Channel.GetAllSitesAsync();
        }
        
        public string[] GetAllPools() {
            return base.Channel.GetAllPools();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllPoolsAsync() {
            return base.Channel.GetAllPoolsAsync();
        }
        
        public string[] GetAppBySite(string site) {
            return base.Channel.GetAppBySite(site);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAppBySiteAsync(string site) {
            return base.Channel.GetAppBySiteAsync(site);
        }
        
        public string SetAppPool(string appPool, string app, string site) {
            return base.Channel.SetAppPool(appPool, app, site);
        }
        
        public System.Threading.Tasks.Task<string> SetAppPoolAsync(string appPool, string app, string site) {
            return base.Channel.SetAppPoolAsync(appPool, app, site);
        }
        
        public string MoveChangeAppPath(string app, string path, string site) {
            return base.Channel.MoveChangeAppPath(app, path, site);
        }
        
        public System.Threading.Tasks.Task<string> MoveChangeAppPathAsync(string app, string path, string site) {
            return base.Channel.MoveChangeAppPathAsync(app, path, site);
        }
        
        public string GetAppVirtualPath(string app, string site) {
            return base.Channel.GetAppVirtualPath(app, site);
        }
        
        public System.Threading.Tasks.Task<string> GetAppVirtualPathAsync(string app, string site) {
            return base.Channel.GetAppVirtualPathAsync(app, site);
        }
        
        public string CreateNewPool(string name, string netclr, string pipeline, bool startflag) {
            return base.Channel.CreateNewPool(name, netclr, pipeline, startflag);
        }
        
        public System.Threading.Tasks.Task<string> CreateNewPoolAsync(string name, string netclr, string pipeline, bool startflag) {
            return base.Channel.CreateNewPoolAsync(name, netclr, pipeline, startflag);
        }
        
        public string CreateAppVir(string site, string pool, string name, string virtualpath, string appvir) {
            return base.Channel.CreateAppVir(site, pool, name, virtualpath, appvir);
        }
        
        public System.Threading.Tasks.Task<string> CreateAppVirAsync(string site, string pool, string name, string virtualpath, string appvir) {
            return base.Channel.CreateAppVirAsync(site, pool, name, virtualpath, appvir);
        }
    }
}
